# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: 'CI'
on:
  workflow_dispatch: 
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'          
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    name: 📦 create NuGet
    runs-on: ubuntu-latest
    steps:   
    - name: 🤘 checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
            
    - name: 🔎 setup .NET # Install the .NET SDK indicated in the global.json file
      uses: actions/setup-dotnet@v3
    
    - name: 🗎 update release notes
      if: github.event_name == 'release' 
      env:
        RELEASE_NAME: ${{ github.event.release.name }}
        RELEASE_BODY: ${{ github.event.release.body }}
      run: |   
        $name = $env:RELEASE_NAME
        $body = $env:RELEASE_BODY
        $releaseNotes = "# Release ${{ github.event.release.tag_name }}" 
                
        if($name){
            $releaseNotes = $releaseNotes + " - "  + $name
        }
        if($body){
            $releaseNotes = $releaseNotes + "`r`n`r`n"  + $body
        }
            
        foreach($propFile in (Get-ChildItem "${{ github.workspace }}" -Recurse -Include "*.csproj", "Directory.Build.props", "Directory.Build.targets")) {
            Write-Host "Found project file '$propFile'"
            $propFileDoc = [xml](Get-Content $propFile)
            $releaseNotesNode = $propFileDoc.SelectSingleNode("Project//PropertyGroup/PackageReleaseNotes[starts-with(., 'RELEASE_NOTES_PLACEHOLDER')]")

            if($releaseNotesNode.InnerText -ne $null) 
            {
                Write-Host "`tPATCHING '$propFile' with new release notes"
                $releaseNotesNode.InnerText = "$releaseNotes"
                $propFileDoc.Save($propFile)
            }
        }
    
    - name: 📦 pack       
      run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }}
          
    - name: ⬆️ upload packages 
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  run_test:
    name: 🧪 run tests
    runs-on: ubuntu-latest
    steps:
    - name: 🤘 checkout
      uses: actions/checkout@v3

    - name: 🔎 setup .NET
      uses: actions/setup-dotnet@v3

    - name: 🧪 run tests and move results
      run: |
        dotnet test --configuration Release --logger "trx;LogFilePrefix=Test"

        New-Item -Path 'TR' -ItemType Directory -Force | Out-Null

        foreach($file in (Get-ChildItem -Recurse -Include *.trx)) {
            $newFile = Join-Path (Get-Location).Path 'TR' "$($file.Directory.Parent.Name.Replace('Nemesis.TextParsers.', '').Replace('.Tests', ''))$($file.Name -replace 'Test_','_')"
            Move-Item -Path "$($file.FullName)" -Destination "$newFile"
        } 
    - name: ⬆️ upload test results
      uses: actions/upload-artifact@v3
      if: success() || failure()    # run this step even if previous step failed
      with:
        name: TestResult
        if-no-files-found: error
        retention-days: 7
        path: "**/*.trx"
  
  deploy:   
    name: 🚀 deploy
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [ create_nuget, run_test ]
    steps:            
      - name: ⬇️ download packages
        uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}
                
      - name: 🔎 setup .NET
        uses: actions/setup-dotnet@v3
              
      - name: 📦 publish NuGet package
        env:
            EVENT_NAME: ${{ github.event_name }}
        run: |          
          $key = ($env:EVENT_NAME -eq 'release') ? "${{ secrets.NUGET_API_KEY }}" : "${{ secrets.GH_PACKAGE_REGISTRY_API_KEY }}"
          $source = ($env:EVENT_NAME -eq 'release') ? "https://api.nuget.org/v3/index.json" : "https://nuget.pkg.github.com/MichalBrylka/index.json"

          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "$key" --source "$source" --skip-duplicate
          } 